// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  password   String
  college    String
  year       Int
  department String
  events     Event[]  @relation("UserEvents") // direct link
  createdAt  DateTime @default(now())
}

model Event {
  id                 String    @id @default(cuid())
  name               String
  image_url          String
  description        String
  entry_fee          Int
  branch             String
  schedule           String
  eventDate          DateTime? // Event date
  eventTime          String? // Event time (e.g., "10:00 AM")
  location           String? // e.g., "Main Arena", "Sky Dome"
  tag                String? // Auto-generated from date (e.g., "6 Nov", "7 Nov")
  teamSize           String? // e.g., "1-3", "2-5"
  prizeMoney         Int? // Prize amount in rupees
  rules              Json? // Array of rules as JSON
  guidelines         Json? // Array of guidelines as JSON
  resultAnnouncement String? // When results will be announced
  contact            String? // Contact email for event queries
  students           User[]    @relation("UserEvents") // back relation
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String
  logoUrl     String
  description String
  tier        SponsorTier
}

enum SponsorTier {
  Gold
  Silver
  Bronze
  Platinium
  Premier
}

model ScienceExhibition {
  id                 String        @id @default(cuid())
  schoolName         String
  teacherCoordinator String
  teacherPhone       String
  category           String
  participants       Participant[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Participant {
  id           String            @id @default(cuid())
  name         String
  class        String
  contact      String
  exhibitionId String
  exhibition   ScienceExhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)
  createdAt    DateTime          @default(now())
}
